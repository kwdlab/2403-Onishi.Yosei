{
  "SchemaVersion": 2,
  "ArtifactName": "dockerfile/20231114/vault:1.11.11.Dockerfile",
  "ArtifactType": "filesystem",
  "Metadata": {
    "ImageConfig": {
      "architecture": "",
      "created": "0001-01-01T00:00:00Z",
      "os": "",
      "rootfs": {
        "type": "",
        "diff_ids": null
      },
      "config": {}
    }
  },
  "Results": [
    {
      "Target": "vault:1.11.11.Dockerfile",
      "Class": "config",
      "Type": "dockerfile",
      "MisconfSummary": {
        "Successes": 23,
        "Failures": 3,
        "Exceptions": 0
      },
      "Misconfigurations": [
        {
          "Type": "Dockerfile Security Check",
          "ID": "DS002",
          "AVDID": "AVD-DS-0002",
          "Title": "Image user should not be 'root'",
          "Description": "Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.",
          "Message": "Specify at least 1 USER command in Dockerfile with non-root user as argument",
          "Namespace": "builtin.dockerfile.DS002",
          "Query": "data.builtin.dockerfile.DS002.deny",
          "Resolution": "Add 'USER \u003cnon root user name\u003e' line to the Dockerfile",
          "Severity": "HIGH",
          "PrimaryURL": "https://avd.aquasec.com/misconfig/ds002",
          "References": [
            "https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",
            "https://avd.aquasec.com/misconfig/ds002"
          ],
          "Status": "FAIL",
          "Layer": {},
          "CauseMetadata": {
            "Provider": "Dockerfile",
            "Service": "general",
            "Code": {
              "Lines": null
            }
          }
        },
        {
          "Type": "Dockerfile Security Check",
          "ID": "DS013",
          "AVDID": "AVD-DS-0013",
          "Title": "'RUN cd ...' to change directory",
          "Description": "Use WORKDIR instead of proliferating instructions like 'RUN cd â€¦ \u0026\u0026 do-something', which are hard to read, troubleshoot, and maintain.",
          "Message": "RUN should not be used to change directory: 'set -eux;     apk add --no-cache ca-certificates gnupg openssl libcap su-exec dumb-init tzdata \u0026\u0026     apkArch=\"$(apk --print-arch)\";     case \"$apkArch\" in         armhf) ARCH='arm' ;;         aarch64) ARCH='arm64' ;;         x86_64) ARCH='amd64' ;;         x86) ARCH='386' ;;         *) echo \u003e\u00262 \"error: unsupported architecture: $apkArch\"; exit 1 ;;     esac \u0026\u0026     VAULT_GPGKEY=C874011F0AB405110D02105534365D9472D7468F;     found='';     for server in         hkps://keys.openpgp.org         hkps://keyserver.ubuntu.com         hkps://pgp.mit.edu     ; do         echo \"Fetching GPG key $VAULT_GPGKEY from $server\";         gpg --batch --keyserver \"$server\" --recv-keys \"$VAULT_GPGKEY\" \u0026\u0026 found=yes \u0026\u0026 break;     done;     test -z \"$found\" \u0026\u0026 echo \u003e\u00262 \"error: failed to fetch GPG key $VAULT_GPGKEY\" \u0026\u0026 exit 1;     mkdir -p /tmp/build \u0026\u0026     cd /tmp/build \u0026\u0026     wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_${ARCH}.zip \u0026\u0026     wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS \u0026\u0026     wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS.sig \u0026\u0026     gpg --batch --verify vault_${VAULT_VERSION}_SHA256SUMS.sig vault_${VAULT_VERSION}_SHA256SUMS \u0026\u0026     grep vault_${VAULT_VERSION}_linux_${ARCH}.zip vault_${VAULT_VERSION}_SHA256SUMS | sha256sum -c \u0026\u0026     unzip -d /tmp/build vault_${VAULT_VERSION}_linux_${ARCH}.zip \u0026\u0026     cp /tmp/build/vault /bin/vault \u0026\u0026     if [ -f /tmp/build/EULA.txt ]; then mkdir -p /usr/share/doc/vault; mv /tmp/build/EULA.txt /usr/share/doc/vault/EULA.txt; fi \u0026\u0026     if [ -f /tmp/build/TermsOfEvaluation.txt ]; then mkdir -p /usr/share/doc/vault; mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/vault/TermsOfEvaluation.txt; fi \u0026\u0026     cd /tmp \u0026\u0026     rm -rf /tmp/build \u0026\u0026     gpgconf --kill dirmngr \u0026\u0026     gpgconf --kill gpg-agent \u0026\u0026     apk del gnupg openssl \u0026\u0026     rm -rf /root/.gnupg'. Use 'WORKDIR' statement instead.",
          "Namespace": "builtin.dockerfile.DS013",
          "Query": "data.builtin.dockerfile.DS013.deny",
          "Resolution": "Use WORKDIR to change directory",
          "Severity": "MEDIUM",
          "PrimaryURL": "https://avd.aquasec.com/misconfig/ds013",
          "References": [
            "https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#workdir",
            "https://avd.aquasec.com/misconfig/ds013"
          ],
          "Status": "FAIL",
          "Layer": {},
          "CauseMetadata": {
            "Provider": "Dockerfile",
            "Service": "general",
            "StartLine": 12,
            "EndLine": 49,
            "Code": {
              "Lines": [
                {
                  "Number": 12,
                  "Content": "RUN set -eux; \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": true,
                  "LastCause": false
                },
                {
                  "Number": 13,
                  "Content": "    apk add --no-cache ca-certificates gnupg openssl libcap su-exec dumb-init tzdata \u0026\u0026 \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": false
                },
                {
                  "Number": 14,
                  "Content": "    apkArch=\"$(apk --print-arch)\"; \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": false
                },
                {
                  "Number": 15,
                  "Content": "    case \"$apkArch\" in \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": false
                },
                {
                  "Number": 16,
                  "Content": "        armhf) ARCH='arm' ;; \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": false
                },
                {
                  "Number": 17,
                  "Content": "        aarch64) ARCH='arm64' ;; \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": false
                },
                {
                  "Number": 18,
                  "Content": "        x86_64) ARCH='amd64' ;; \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": false
                },
                {
                  "Number": 19,
                  "Content": "        x86) ARCH='386' ;; \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": false
                },
                {
                  "Number": 20,
                  "Content": "        *) echo \u003e\u00262 \"error: unsupported architecture: $apkArch\"; exit 1 ;; \\",
                  "IsCause": true,
                  "Annotation": "",
                  "Truncated": false,
                  "FirstCause": false,
                  "LastCause": true
                },
                {
                  "Number": 21,
                  "Content": "",
                  "IsCause": false,
                  "Annotation": "",
                  "Truncated": true,
                  "FirstCause": false,
                  "LastCause": false
                }
              ]
            }
          }
        },
        {
          "Type": "Dockerfile Security Check",
          "ID": "DS026",
          "AVDID": "AVD-DS-0026",
          "Title": "No HEALTHCHECK defined",
          "Description": "You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.",
          "Message": "Add HEALTHCHECK instruction in your Dockerfile",
          "Namespace": "builtin.dockerfile.DS026",
          "Query": "data.builtin.dockerfile.DS026.deny",
          "Resolution": "Add HEALTHCHECK instruction in Dockerfile",
          "Severity": "LOW",
          "PrimaryURL": "https://avd.aquasec.com/misconfig/ds026",
          "References": [
            "https://blog.aquasec.com/docker-security-best-practices",
            "https://avd.aquasec.com/misconfig/ds026"
          ],
          "Status": "FAIL",
          "Layer": {},
          "CauseMetadata": {
            "Provider": "Dockerfile",
            "Service": "general",
            "Code": {
              "Lines": null
            }
          }
        }
      ]
    }
  ]
}
